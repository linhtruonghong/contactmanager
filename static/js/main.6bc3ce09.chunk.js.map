{"version":3,"sources":["context.js","components/contact/Contact.js","components/contact/Contacts.js","components/layout/TextInputGroup.js","components/contact/AddContact.js","components/layout/Header.js","components/pages/About.js","components/pages/NotFound.js","components/test/test.js","components/contact/EditContact.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","reducer","state","action","type","contacts","filter","contact","id","payload","map","Provider","dispatch","setState","axios","get","res","this","data","value","props","children","Component","Consumer","Contact","showContactInfo","onDeleteClick","a","async","delete","name","email","phone","className","onClick","style","cursor","float","color","bind","to","marginRight","fontSize","paddingTop","Contacts","Fragment","key","TextInputGroup","label","placeholder","onChange","error","htmlFor","classnames","defaultProps","AddContact","errors","e","target","onSubmit","preventDefault","newContact","post","history","push","lable","Header","branding","href","Test","title","body","fetch","then","response","json","EditContact","updateContact","match","params","put","App","exact","path","component","About","NotFound","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6bc3ce09.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\nimport axios from 'axios';\r\n\r\nconst Context = React.createContext();\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'DELETE_CONTACT':\r\n            return {\r\n                ...state,\r\n                contacts: state.contacts.filter(contact => contact.id !== action.payload)\r\n            };\r\n        case 'ADD_CONTACT':\r\n            return {\r\n                ...state,\r\n                contacts: [action.payload, ...state.contacts]\r\n            };\r\n        case 'UPDATE_CONTACT':\r\n            return {\r\n                ...state,\r\n                contacts: state.contacts.map(contact =>\r\n                    contact.id === action.payload.id\r\n                        ? (contact = action.payload)\r\n                        : contact\r\n                )\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport class Provider extends Component {\r\n    state = {\r\n        contacts: [],\r\n        dispatch: action => this.setState(state => reducer(state, action))\r\n    };\r\n\r\n    async componentDidMount() {\r\n        const res = await axios.get('http://jsonplaceholder.typicode.com/users');\r\n\r\n        this.setState({contacts: (await res).data});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Context.Provider value={this.state}>\r\n                {this.props.children}\r\n            </Context.Provider>\r\n        )\r\n    }\r\n}\r\n\r\nexport const Consumer = Context.Consumer;","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Consumer} from \"../../context\";\r\nimport axios from 'axios';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nclass Contact extends Component {\r\n\r\n    state = {\r\n        showContactInfo: true\r\n    };\r\n\r\n    onDeleteClick = async (id, dispatch) => {\r\n        try {\r\n            await axios.delete(`http://jsonplaceholder.typicode.com/users/${id}`);\r\n            dispatch({type: 'DELETE_CONTACT', payload: id});\r\n        } catch (e) {\r\n            dispatch({type: 'DELETE_CONTACT', payload: id});\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const {id, name, email, phone} = this.props.contact;\r\n        const {showContactInfo} = this.state;\r\n\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const {dispatch} = value;\r\n                    return (\r\n                        <div className=\"card card-body mb-3\">\r\n                            <h4>{name}\r\n                                <i\r\n                                    onClick={() => {\r\n                                        this.setState({showContactInfo: !this.state.showContactInfo})\r\n                                    }}\r\n                                    className=\"fa fa-sort-down\"\r\n                                    style={{cursor: 'pointer'}}\r\n                                />\r\n                                <i\r\n                                    className=\"fa fa-times\"\r\n                                    style={{cursor: 'pointer', float: 'right', color: 'red'}}\r\n                                    onClick={this.onDeleteClick.bind(this, id, dispatch)}\r\n                                />\r\n                                <Link to={`contact/edit/${id}`}>\r\n                                    <i\r\n                                        className=\"fa fa-pencil\"\r\n                                        style={{\r\n                                            cursor: 'pointer',\r\n                                            float: 'right',\r\n                                            color: 'black',\r\n                                            marginRight: '10px',\r\n                                            fontSize: '20px',\r\n                                            paddingTop: '3px'\r\n                                        }}\r\n                                    />\r\n                                </Link>\r\n                            </h4>\r\n                            {showContactInfo ? <ul className=\"list-group\">\r\n                                <li className=\"list-group-item\">{email}</li>\r\n                                <li className=\"list-group-item\">{phone}</li>\r\n                            </ul> : null}\r\n                        </div>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nContact.propTypes = {\r\n    contact: PropTypes.object.isRequired\r\n};\r\n\r\nexport default Contact;","import React, {Component} from 'react';\r\nimport Contact from \"./Contact\";\r\nimport {Consumer} from \"../../context\";\r\n\r\nclass Contacts extends Component {\r\n    render() {\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const {contacts} = value;\r\n                    return (\r\n                        <React.Fragment>\r\n                            <h1 className=\"display-4 mb-2\">\r\n                                <span className=\"text-danger\">Contact List</span>\r\n                            </h1>\r\n                            {contacts.map(contact => (\r\n                                <Contact key={contact.id} contact={contact}/>\r\n                            ))}\r\n                        </React.Fragment>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Contacts;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classnames from 'classnames';\r\n\r\nconst TextInputGroup = (\r\n    {\r\n        label,\r\n        name,\r\n        value,\r\n        placeholder,\r\n        type,\r\n        onChange,\r\n        error\r\n    }) => {\r\n    return (\r\n        <div className=\"form-group\">\r\n            <label htmlFor={name}>{label}</label>\r\n            <input type={type}\r\n                   name={name}\r\n                   className={classnames('form-control form-control-lg', {'is-invalid': error})}\r\n                   placeholder={placeholder}\r\n                   value={value}\r\n                   onChange={onChange}\r\n            />\r\n            {error && <div className=\"invalid-feedback\">{error}</div>}\r\n        </div>\r\n    )\r\n};\r\n\r\nTextInputGroup.propTypes = {\r\n    lable: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    placeholder: PropTypes.string.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n    type: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n    error: PropTypes.string.isRequired\r\n};\r\n\r\nTextInputGroup.defaultProps = {\r\n    type: 'text'\r\n};\r\n\r\nexport default TextInputGroup;","import React, {Component} from 'react';\r\nimport {Consumer} from \"../../context\";\r\nimport TextInputGroup from \"../layout/TextInputGroup\";\r\nimport axios from 'axios';\r\n\r\nclass AddContact extends Component {\r\n\r\n    state = {\r\n        name: '',\r\n        email: '',\r\n        phone: '',\r\n        errors: {}\r\n    };\r\n\r\n    onChange = (e) => this.setState({[e.target.name]: e.target.value});\r\n\r\n    onSubmit = async (dispatch, e) => {\r\n        e.preventDefault();\r\n        const {name, email, phone} = this.state;\r\n        const newContact = {\r\n            name,\r\n            email,\r\n            phone\r\n        };\r\n\r\n        // Check for Errors\r\n        if (name === '') {\r\n            this.setState({errors: {name: 'Name is required'}});\r\n            return;\r\n        }\r\n\r\n        if (email === '') {\r\n            this.setState({errors: {email: 'Email is required'}});\r\n            return;\r\n        }\r\n\r\n        if (phone === '') {\r\n            this.setState({errors: {phone: 'Phone is required'}});\r\n            return;\r\n        }\r\n\r\n        const res = await axios.post('http://jsonplaceholder.typicode.com/users', newContact);\r\n        dispatch({type: 'ADD_CONTACT', payload: res.data});\r\n\r\n        // Clear input fields\r\n        this.setState({\r\n            name: '',\r\n            email: '',\r\n            phone: '',\r\n            errors: {}\r\n        });\r\n\r\n        this.props.history.push('/');\r\n    };\r\n\r\n    render() {\r\n        const {name, email, phone, errors} = this.state;\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const {dispatch} = value;\r\n                    return (\r\n                        <div className=\"card mb-3\">\r\n                            <div className=\"card-header\">Add Contact</div>\r\n                            <div className=\"card-body\">\r\n                                <form onSubmit={this.onSubmit.bind(this, dispatch)}>\r\n                                    <TextInputGroup\r\n                                        lable=\"Name\"\r\n                                        name=\"name\"\r\n                                        placeholder=\"Enter name\"\r\n                                        value={name}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.name}\r\n                                    />\r\n                                    <TextInputGroup\r\n                                        lable=\"Email\"\r\n                                        name=\"email\"\r\n                                        type=\"email\"\r\n                                        placeholder=\"Enter email\"\r\n                                        value={email}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.email}\r\n                                    />\r\n                                    <TextInputGroup\r\n                                        lable=\"Phone\"\r\n                                        name=\"phone\"\r\n                                        placeholder=\"Enter phone\"\r\n                                        value={phone}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.phone}\r\n                                    />\r\n                                    <input type=\"submit\"\r\n                                           value=\"Add Contact\"\r\n                                           className=\"btn btn-light btn-block\"/>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddContact;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst Header = (props) => {\r\n    const {branding} = props;\r\n    return (\r\n        <nav className=\"navbar navbar-expand-sm navbar-dark bg-danger mb-3 py-0\">\r\n            <div className=\"container\">\r\n                <a href=\"/\" className=\"navbar-brand\">{branding}</a>\r\n                <div>\r\n                    <ul className=\"navbar-nav mr-auto\">\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/\" className=\"nav-link\">\r\n                                <i className=\"fa fa-home\"/>\r\n                                Home\r\n                            </Link>\r\n                        </li>\r\n                        <li>\r\n                            <Link to=\"/contact/add\" className=\"nav-link\">\r\n                                <i className=\"fa fa-plus\"/>\r\n                                Add\r\n                            </Link>\r\n                        </li>\r\n                        <li>\r\n                            <Link to=\"/about\" className=\"nav-link\">\r\n                                <i className=\"fa fa-question\"/>\r\n                                About\r\n                            </Link>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    );\r\n};\r\n\r\nHeader.defaultProps = {\r\n    branding: 'My app'\r\n};\r\n\r\nHeader.propTypes = {\r\n    branding: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nexport default () => {\r\n    return (\r\n        <div>\r\n            <h1 className=\"display-4\">About Contact Manager</h1>\r\n            <p className=\"lead\">Simple app to manage contacts</p>\r\n            <p className=\"text-secondary\">Version 1.0.0</p>\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\n\r\nexport default () => {\r\n    return (\r\n        <div>\r\n            <h1 className=\"display-4\"><span className=\"text-danger\">404</span> Page Not Found</h1>\r\n            <p className=\"lead\">Sorry, that page does not exist</p>\r\n        </div>\r\n    );\r\n}","import React, {Component} from 'react';\r\n\r\nclass Test extends Component {\r\n\r\n    state = {\r\n        title: '',\r\n        body: ''\r\n    };\r\n\r\n    componentDidMount() {\r\n        fetch('http://jsonplaceholder.typicode.com/posts/1')\r\n            .then(response => response.json())\r\n            .then(data => this.setState({\r\n                title: data.title,\r\n                body: data.body\r\n            }));\r\n    }\r\n\r\n    // componentWillMount() {\r\n    //     console.log('componentWillMount...');\r\n    // }\r\n    //\r\n    // componentWillUpdate(nextProps, nextState, nextContext) {\r\n    //     console.log('componentDidUpdate...');\r\n    // }\r\n\r\n    render() {\r\n        const {title, body} = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <h1>{title}</h1>\r\n                <p>{body}</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Test;","import React, {Component} from 'react';\r\nimport {Consumer} from \"../../context\";\r\nimport TextInputGroup from \"../layout/TextInputGroup\";\r\nimport axios from 'axios';\r\n\r\nclass EditContact extends Component {\r\n\r\n    state = {\r\n        name: '',\r\n        email: '',\r\n        phone: '',\r\n        errors: {}\r\n    };\r\n\r\n    async componentDidMount() {\r\n        const {id} = this.props.match.params;\r\n        const res = await axios.get(`http://jsonplaceholder.typicode.com/users/${id}`);\r\n\r\n        const contact = res.data;\r\n\r\n        this.setState({\r\n            name: contact.name,\r\n            email: contact.email,\r\n            phone: contact.phone\r\n        });\r\n    }\r\n\r\n    onChange = (e) => this.setState({[e.target.name]: e.target.value});\r\n\r\n    onSubmit = async (dispatch, e) => {\r\n        e.preventDefault();\r\n        const {name, email, phone} = this.state;\r\n\r\n        // Check for Errors\r\n        if (name === '') {\r\n            this.setState({errors: {name: 'Name is required'}});\r\n            return;\r\n        }\r\n\r\n        if (email === '') {\r\n            this.setState({errors: {email: 'Email is required'}});\r\n            return;\r\n        }\r\n\r\n        if (phone === '') {\r\n            this.setState({errors: {phone: 'Phone is required'}});\r\n            return;\r\n        }\r\n\r\n        const updateContact = {\r\n            name,\r\n            email,\r\n            phone,\r\n        };\r\n\r\n        const {id} = this.props.match.params;\r\n        const res = await axios.put(\r\n            `http://jsonplaceholder.typicode.com/users/${id}`,\r\n            updateContact\r\n        );\r\n\r\n        dispatch({type: 'UPDATE_CONTACT', payload: res.data});\r\n\r\n        // Clear input fields\r\n        this.setState({\r\n            name: '',\r\n            email: '',\r\n            phone: '',\r\n            errors: {}\r\n        });\r\n\r\n        this.props.history.push('/');\r\n    };\r\n\r\n    render() {\r\n        const {name, email, phone, errors} = this.state;\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const {dispatch} = value;\r\n                    return (\r\n                        <div className=\"card mb-3\">\r\n                            <div className=\"card-header\">Edit Contact</div>\r\n                            <div className=\"card-body\">\r\n                                <form onSubmit={this.onSubmit.bind(this, dispatch)}>\r\n                                    <TextInputGroup\r\n                                        lable=\"Name\"\r\n                                        name=\"name\"\r\n                                        placeholder=\"Enter name\"\r\n                                        value={name}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.name}\r\n                                    />\r\n                                    <TextInputGroup\r\n                                        lable=\"Email\"\r\n                                        name=\"email\"\r\n                                        type=\"email\"\r\n                                        placeholder=\"Enter email\"\r\n                                        value={email}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.email}\r\n                                    />\r\n                                    <TextInputGroup\r\n                                        lable=\"Phone\"\r\n                                        name=\"phone\"\r\n                                        placeholder=\"Enter phone\"\r\n                                        value={phone}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.phone}\r\n                                    />\r\n                                    <input type=\"submit\"\r\n                                           value=\"Update Contact\"\r\n                                           className=\"btn btn-light btn-block\"/>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EditContact;","import React from 'react';\nimport {HashRouter as Router, Route, Switch} from \"react-router-dom\";\n\nimport {Provider} from \"./context\";\nimport Contacts from \"./components/contact/Contacts\";\nimport AddContact from \"./components/contact/AddContact\";\n\nimport Header from \"./components/layout/Header\";\nimport About from \"./components/pages/About\";\nimport NotFound from \"./components/pages/NotFound\";\nimport Test from \"./components/test/test\";\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\nimport EditContact from \"./components/contact/EditContact\";\n\nfunction App() {\n\n    return (\n        <Provider>\n            <Router>\n                <div className=\"App\">\n                    <Header branding=\"Contact Manager\"/>\n                    <div className=\"container\">\n                        <Switch>\n                            <Route exact path=\"/\" component={Contacts}/>\n                            <Route exact path=\"/contact/add\" component={AddContact}/>\n                            <Route exact path=\"/contact/edit/:id\" component={EditContact}/>\n                            <Route exact path=\"/about\" component={About}/>\n                            <Route exact path=\"/test\" component={Test}/>\n                            <Route component={NotFound}/>\n                        </Switch>\n                    </div>\n                </div>\n            </Router>\n        </Provider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}